#!/bin/bash

# Cria os diretórios principais
mkdir -p app/{models,controllers,helpers,mailers,jobs}
mkdir -p app/views/{home,layouts,shared}
mkdir -p app/controllers/traits
mkdir -p app/models/traits
mkdir -p config/{environments,initializers,locales} db lib log public tests/{controllers,models,integration,fixtures} tmp/cache
mkdir -p db/{migrations,seeds}

# Adiciona arquivos .keep em todos os diretórios relevantes
find app db/{migrations,seeds} config lib log tests tmp/cache app/views/shared -type d \( ! -path 'app/controllers/*' and ! -name 'config/initializers' and ! -name 'config' and ! -name 'app' and ! -name 'app/views/*' and ! -name 'tests' \) -exec touch {}/.keep \;

# Cria o arquivo composer.json na raiz do projeto
cat <<EOF > composer.json
{
  "require": {
    "slim/slim": "^4.0",
    "slim/twig-view": "^3.4",
    "slim/psr7": "^1.6",
    "vlucas/phpdotenv": "^5.6"
  },
  "autoload": {
    "psr-4": {
      "App\\\\": "app/",
      "App\\\\Models\\\\": "app/models/",
      "App\\\\Controllers\\\\": "app/controllers/",
      "App\\\\Views\\\\": "app/views/",
      "App\\\\Helpers\\\\": "app/helpers/",
      "App\\\\Mailers\\\\": "app/mailers/",
      "App\\\\Jobs\\\\": "app/jobs/",
      "App\\\\Models\\\\Traits\\\\": "app/models/traits/",
      "App\\\\Controllers\\\\Traits\\\\": "app/controllers/traits/"
    }
  },
  "autoload-dev": {
    "psr-4": {
      "tests\\\\": "tests/"
    }
  },
  "config": {
    "optimize-autoloader": true
  },
  "scripts": {
    "post-install-cmd": [
      "@composer dump-autoload -o"
    ],
    "post-update-cmd": [
      "@composer dump-autoload -o"
    ]
  },
  "require-dev": {
    "phpunit/phpunit": "^11.1"
  }
}
EOF

cat <<EOF > app/controllers/HomeController.php
<?php

namespace App\\Controllers;

class HomeController extends ApplicationController
{
    public function index(\$request, \$response, \$args)
    {
        return \$this->getTemplateEngine()->render(
            \$response,
            \$this->setTemplateView(),
            [
                'site_title' => 'Base Structure'
            ]
        );
    }
}
EOF

cat <<EOF > app/views/home/index.html
{% extends "layouts/application.html" %}

{% block content %}
Conteúdo aqui!
{% endblock %}
EOF

cat <<EOF > app/views/layouts/application.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ site_title }}</title>
  </head>
  <body>
    {% block content %}{% endblock %}
  </body>
</html>
EOF



# Cria o arquivo init.php para configurar o Slim App
cat <<EOF > init.php
<?php

/*
\ * Path: /init.php
\ * Boostrap of the project
\ */

use Slim\\Factory\\AppFactory;
use Illuminate\\Database\\Capsule\\Manager as Capsule;

require 'vendor/autoload.php';

// Carregar variáveis de ambiente
\$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);
\$dotenv->load();

\$app = AppFactory::create();
// Add Error Handling Middleware
\$app->addErrorMiddleware(true, true, true);

// Carrega todos os arquivos de inicialização
\$initializersPath = __DIR__ . '/config/initializers/';
if (is_dir(\$initializersPath)) {
    \$initializerFiles = new DirectoryIterator(\$initializersPath);
    foreach (\$initializerFiles as \$file) {
        if (\$file->isFile() && \$file->getExtension() === 'php') {
            require_once \$file->getPathname();
        }
    }
}

// Inicia o Eloquent ORM
\$config = require 'config/database.php';
//\$capsule = new Capsule();
//\$capsule->addConnection(\$config);
//\$capsule->setAsGlobal();
//\$capsule->bootEloquent();

// Carrega as rotas
require 'config/routes.php';
EOF

cat <<EOF > config/database.php
<?php

return [
    'driver' => DB_DRIVER,
    'host' => DB_HOST,
    'database' => DB_DATABASE,
    'username' => DB_USERNAME,
    'password' => DB_PASSWORD,
    'charset' => DB_CHARSET,
    'collation' => 'utf8_unicode_ci',
    'prefix' => '',
];
EOF

cat <<EOF > config/initializers/constants.php
<?php

define('ROOT', dirname(__FILE__, 3));
define('VIEWS', ROOT . '/app/views/');
define('EXTENSION_VIEW', '.html');

// Configurações de banco de dados
define('DB_DRIVER', \$_ENV['DB_DRIVER']);
define('DB_HOST', \$_ENV['DB_HOST']);
define('DB_PORT', \$_ENV['DB_PORT']);
define('DB_DATABASE', \$_ENV['DB_DATABASE']);
define('DB_USERNAME', \$_ENV['DB_USERNAME']);
define('DB_PASSWORD', \$_ENV['DB_PASSWORD']);
define('DB_CHARSET', \$_ENV['DB_CHARSET']);

EOF

# Cria o arquivo public/index.php que define a rota inicial
cat <<EOF > public/index.php
<?php

require "../init.php";

\$app->run();

EOF

# Cria o arquivo config/routes.php com uma rota de exemplo
cat <<EOF > config/routes.php
<?php

use App\\Controllers\\HomeController;

\$app->get('/', HomeController::class . ':index');

EOF

# Cria o arquivo phpunit.xml na raiz do projeto
cat <<EOF > phpunit.xml
<?xml version="1.0" encoding="UTF-8"?>
<phpunit bootstrap="vendor/autoload.php" colors="true">
    <testssuites>
        <testssuite name="Application tests Suite">
            <directory suffix=".php">tests</directory>
        </testssuite>
    </testssuites>
    <filter>
        <whitelist>
            <directory suffix=".php">app</directory>
        </whitelist>
    </filter>
</phpunit>
EOF

cat <<EOF > tests/init.php
<?php

\/*
\ * Path: tests/init.php
\ * Load files for testing
\ */
require 'vendor/autoload.php';
require 'init.php';
EOF

cat <<EOF > app/controllers/traits/Views.php
<?php

namespace App\\Controllers\\Traits;

use Exception;
use Slim\\Views\\Twig;

trait Views
{
    public function getTemplateEngine()
    {
        try {
            return Twig::create(VIEWS, \$this->setCache());
        } catch (Exception \$e) {
            var_dump(\$e->getMessage());
            return null;
        }
    }

    public function setTemplateView()
    {
        \$trace = debug_backtrace();
        \$caller = \$trace[1];

        \$className = strtolower(str_replace('Controller', '', basename(str_replace('\\\\', '/', \$caller['class']))));
        \$methodName = strtolower(\$caller['function']);

        \$filename = \$className . '/' . \$methodName;

        return \$filename . EXTENSION_VIEW;
    }

    public function setCache()
    {
        // Define uma configuração padrão desabilitando o cache
        \$templateSettings = ['cache' => false];

        // Ativa o cache somente no ambiente de produção
        if (\$_ENV['APP_ENV'] === 'production') {
            // Verifica se um caminho personalizado de cache foi especificado
            \$cachePath = \$_ENV['CACHE_PATH'] ?? 'tmp/cache';
            \$templateSettings['cache'] = \$cachePath;
        }

        return \$templateSettings;
    }
}
EOF

cat <<EOF > app/controllers/ApplicationController.php
<?php

namespace App\\Controllers;

abstract class ApplicationController
{
    use Traits\\Views;
}
EOF

# Instala as dependências e cria o autoload.php na pasta vendor
composer install

# Executa o primeiro teste, criando a migração
./vendor/bin/phpunit --migrate-configuration

# Copia o arquivo .env.example para .env se ainda não existir
[ -f .env ] || cp .env.example .env