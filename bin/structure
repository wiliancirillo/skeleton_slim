#!/bin/bash

# Função para verificar a instalação do Composer
check_composer_installed() {
    if ! command -v composer &> /dev/null; then
        echo "Composer não está instalado. Por favor, instale o Composer antes de continuar."
        exit 1
    fi
}

# Verifica se o Composer está instalado
check_composer_installed

# Cria os diretórios principais
echo "Criando diretórios..."
mkdir -p app/{models,controllers,helpers,mailers,jobs}
mkdir -p app/controllers/traits
mkdir -p app/models/traits
mkdir -p config/{environments,initializers,locales} db lib log public tests/{controllers,models,integration,fixtures} tmp/cache
mkdir -p db/{migrations,seeds}
mkdir -p .vscode

# Adiciona arquivos .keep em todos os diretórios relevantes que estão vazios
echo "Adicionando arquivos .keep..."
find app db/{migrations,seeds} config lib log tests tmp/cache -type d -exec bash -c '[[ -z $(ls -A "$1") ]] && touch "$1/.keep"' _ {} \;

# Cria o arquivo composer.json na raiz do projeto
echo "Criando arquivo composer.json..."
cat <<EOF > composer.json
{
  "require": {
    "slim/slim": "^4.0",
    "slim/psr7": "^1.6",
    "vlucas/phpdotenv": "^5.6",
    "doctrine/orm": "^2.11",
    "doctrine/migrations": "^3.0",
    "php-di/php-di": "^6.3",
    "symfony/cache": "^5.3"
  },
  "autoload": {
    "psr-4": {
      "App\\\\": "app/",
      "App\\\\Models\\\\": "app/models/",
      "App\\\\Controllers\\\\": "app/controllers/",
      "App\\\\Helpers\\\\": "app/helpers/",
      "App\\\\Mailers\\\\": "app/mailers/",
      "App\\\\Jobs\\\\": "app/jobs/",
      "App\\\\Models\\\\Traits\\\\": "app/models/traits/",
      "App\\\\Controllers\\\\Traits\\\\": "app/controllers/traits/"
    }
  },
  "autoload-dev": {
    "psr-4": {
      "Tests\\\\": "tests/"
    }
  },
  "config": {
    "optimize-autoloader": true
  },
  "scripts": {
    "post-install-cmd": [
      "@composer dump-autoload -o"
    ],
    "post-update-cmd": [
      "@composer dump-autoload -o"
    ]
  },
  "require-dev": {
    "pestphp/pest": "^1.22",
    "nunomaduro/collision": "^5.0",
    "friendsofphp/php-cs-fixer": "^3.0"
  }
}
EOF

# Cria o arquivo ApplicationController.php
echo "Criando arquivo ApplicationController.php..."
cat <<EOF > app/controllers/ApplicationController.php
<?php

namespace App\\Controllers;

class ApplicationController
{
    // Este é um controlador base que outros controladores podem estender
}
EOF

# Cria o arquivo WelcomeController.php
echo "Criando arquivo WelcomeController.php..."
cat <<EOF > app/controllers/WelcomeController.php
<?php

namespace App\\Controllers;

use Psr\\Container\\ContainerInterface;

class WelcomeController extends ApplicationController
{
    private \$container;

    public function __construct(ContainerInterface \$container)
    {
        \$this->container = \$container;
    }

    public function index(\$request, \$response, \$args)
    {
        \$entityManager = \$this->container->get('EntityManager');
        // Use o EntityManager conforme necessário

        \$response->getBody()->write(json_encode([
            'message' => 'API Structure with Slim Framework 4'
        ]));
        return \$response->withHeader('Content-Type', 'application/json');
    }
}
EOF

# Cria o arquivo init.php para configurar o Slim App
echo "Criando arquivo init.php..."
cat <<EOF > init.php
<?php

use DI\Container;
use Slim\Factory\AppFactory;
use Doctrine\ORM\ORMSetup;
use Doctrine\ORM\EntityManager;
use Doctrine\DBAL\DriverManager;

require 'vendor/autoload.php';

// Carregar variáveis de ambiente
\$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
\$dotenv->load();

// Configurar o Container
\$container = new Container();
AppFactory::setContainer(\$container);

\$app = AppFactory::create();
\$app->addErrorMiddleware(true, true, true);

// Configurar o Doctrine ORM
\$isDevMode = true;
\$config = ORMSetup::createAttributeMetadataConfiguration([__DIR__ . '/app/models'], \$isDevMode);

// Carregar configurações de conexão do arquivo database.php
\$dbParams = require __DIR__ . '/config/database.php';

// Cria a conexão usando o DriverManager e o EntityManager com a configuração
\$connection = DriverManager::getConnection(\$dbParams, \$config);
\$entityManager = EntityManager::create(\$connection, \$config);

// Adiciona EntityManager ao contêiner do Slim
\$container->set('EntityManager', \$entityManager);

// Carrega todos os arquivos de inicialização
\$initializersPath = __DIR__ . '/config/initializers/';
if (is_dir(\$initializersPath)) {
    \$initializerFiles = new DirectoryIterator(\$initializersPath);
    foreach (\$initializerFiles as \$file) {
        if (\$file->isFile() && \$file->getExtension() === 'php') {
            require_once \$file->getPathname();
        }
    }
}

// Carrega as rotas
require 'config/routes.php';
EOF

# Cria o arquivo config/database.php
echo "Criando arquivo database.php..."
cat <<EOF > config/database.php
<?php

return [
    'driver' => \$_ENV['DB_DRIVER'],
    'host' => \$_ENV['DB_HOST'],
    'dbname' => \$_ENV['DB_DATABASE'],
    'user' => \$_ENV['DB_USERNAME'],
    'password' => \$_ENV['DB_PASSWORD'],
    'charset' => 'utf8',
];
EOF

# Cria o arquivo public/index.php que define a rota inicial
echo "Criando arquivo public/index.php..."
cat <<EOF > public/index.php
<?php

require "../init.php";

\$app->run();

EOF

# Cria o arquivo config/routes.php com uma rota de exemplo
echo "Criando arquivo routes.php..."
cat <<EOF > config/routes.php
<?php

use App\\Controllers\\WelcomeController;

\$app->get('/', WelcomeController::class . ':index');

EOF

# Cria o arquivo pest.php na raiz do projeto
echo "Criando arquivo pest.php..."
cat <<EOF > pest.php
<?php

uses(Tests\\TestCase::class)->in('Feature', 'Unit');

EOF

# Cria o arquivo de teste para WelcomeController
echo "Criando arquivo WelcomeControllerTest.php..."
cat <<EOF > tests/Feature/WelcomeControllerTest.php
<?php

test('home route returns a JSON response', function () {
    \$response = \$this->get('/');
    \$response->assertStatus(200)
              ->assertJson([
                  'message' => 'API Structure with Slim Framework 4',
              ]);
});
EOF

# Cria o arquivo TestCase.php
echo "Criando arquivo TestCase.php..."
cat <<EOF > tests/TestCase.php
<?php

namespace Tests;

use Slim\\App;
use Slim\\Factory\\AppFactory;
use PHPUnit\\Framework\\TestCase as BaseTestCase;

class TestCase extends BaseTestCase
{
    protected function setUp(): void
    {
        parent::setUp();
        \$this->app = \$this->createApp();
    }

    protected function createApp(): App
    {
        require __DIR__ . '/../init.php';
        return \$app;
    }

    public function get(\$uri)
    {
        \$request = \$this->createRequest('GET', \$uri);
        return \$this->handleRequest(\$request);
    }

    protected function createRequest(\$method, \$uri)
    {
        \$env = \Slim\\Http\\Environment::mock([
            'REQUEST_METHOD' => \$method,
            'REQUEST_URI' => \$uri,
        ]);

        return \Slim\\Http\\Request::createFromEnvironment(\$env);
    }

    protected function handleRequest(\$request)
    {
        \$response = \$this->app->handle(\$request);
        return new \Pest\\PestResponse(\$response);
    }
}
EOF

# Cria o arquivo cli-config.php para o Doctrine CLI
echo "Criando arquivo cli-config.php..."
cat <<EOF > cli-config.php
<?php

use Doctrine\\ORM\\Tools\\Console\\ConsoleRunner;
use Doctrine\\ORM\\EntityManager;
use Dotenv\\Dotenv;

require_once 'vendor/autoload.php';

// Carregar variáveis de ambiente
\$dotenv = Dotenv::createImmutable(__DIR__);
\$dotenv->load();

\$config = ORMSetup::createAttributeMetadataConfiguration([__DIR__ . "/app/models"], true);
\$dbParams = require __DIR__ . '/config/database.php';

\$entityManager = EntityManager::create(DriverManager::getConnection(\$dbParams, \$config), \$config);

return ConsoleRunner::createHelperSet(\$entityManager);
EOF

# Cria o arquivo settings.json para o PHP CS Fixer no VSCode
echo "Criando arquivo settings.json..."
cat <<EOF > .vscode/settings.json
{
    "php-cs-fixer.executablePath": "php-cs-fixer",
    "php-cs-fixer.rules": "@PSR2",
    "php-cs-fixer.config": ".php-cs-fixer.php",
    "editor.formatOnSave": true,
    "[php]": {
        "editor.defaultFormatter": "junstyle.php-cs-fixer"
    }
}
EOF

# Instala as dependências e cria o autoload.php na pasta vendor
echo "Instalando dependências do Composer..."
composer install

# Copia o arquivo .env.example para .env se ainda não existir
[ -f .env ] || cp .env.example .env

# Executa o fix para os arquivos
echo "Executando php-cs-fixer..."
php-cs-fixer fix .

echo "Estrutura do projeto criada com sucesso!"
